// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Server.Data;

#nullable disable

namespace Server.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250717221434_AddJoinedDateColumn")]
    partial class AddJoinedDateColumn
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Server.Models.ActivityCompletion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ActivityId")
                        .HasColumnType("integer")
                        .HasColumnName("activityid");

                    b.Property<DateTime>("CompletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("completedat");

                    b.Property<int>("PointsEarned")
                        .HasColumnType("integer")
                        .HasColumnName("pointsearned");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("userid");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.HasIndex("UserId");

                    b.ToTable("activitycompletions", (string)null);
                });

            modelBuilder.Entity("Server.Models.Challenge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("category");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("enddate");

                    b.Property<int>("PointsReward")
                        .HasColumnType("integer")
                        .HasColumnName("pointsreward");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("startdate");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.ToTable("challenges", (string)null);
                });

            modelBuilder.Entity("Server.Models.SustainableActivity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("category");

                    b.Property<int?>("ChallengeId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsDaily")
                        .HasColumnType("boolean")
                        .HasColumnName("isdaily");

                    b.Property<bool>("IsOneTime")
                        .HasColumnType("boolean")
                        .HasColumnName("isonetime");

                    b.Property<bool>("IsWeekly")
                        .HasColumnType("boolean")
                        .HasColumnName("isweekly");

                    b.Property<int>("PointsValue")
                        .HasColumnType("integer")
                        .HasColumnName("pointsvalue");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.HasIndex("ChallengeId");

                    b.ToTable("sustainableactivities", (string)null);
                });

            modelBuilder.Entity("Server.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AccommodationType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("accommodationtype");

                    b.Property<string>("Course")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("course");

                    b.Property<int>("CurrentStreak")
                        .HasColumnType("integer")
                        .HasColumnName("currentstreak");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<DateTime>("JoinDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("joindate");

                    b.Property<DateTime>("LastActivityDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lastactivitydate");

                    b.Property<int>("MaxStreak")
                        .HasColumnType("integer")
                        .HasColumnName("maxstreak");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<int>("Points")
                        .HasColumnType("integer")
                        .HasColumnName("points");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("username");

                    b.Property<int>("YearOfStudy")
                        .HasColumnType("integer")
                        .HasColumnName("yearofstudy");

                    b.HasKey("Id");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("Server.Models.UserChallenge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ChallengeId")
                        .HasColumnType("integer")
                        .HasColumnName("challengeid");

                    b.Property<bool>("Completed")
                        .HasColumnType("boolean")
                        .HasColumnName("completed");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("completedat");

                    b.Property<DateTime>("JoinedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("joineddate");

                    b.Property<int>("Progress")
                        .HasColumnType("integer")
                        .HasColumnName("progress");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("userid");

                    b.HasKey("Id");

                    b.HasIndex("ChallengeId");

                    b.HasIndex("UserId");

                    b.ToTable("userchallenges", (string)null);
                });

            modelBuilder.Entity("Server.Models.ActivityCompletion", b =>
                {
                    b.HasOne("Server.Models.SustainableActivity", "Activity")
                        .WithMany("Completions")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Server.Models.User", "User")
                        .WithMany("CompletedActivities")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activity");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Server.Models.SustainableActivity", b =>
                {
                    b.HasOne("Server.Models.Challenge", null)
                        .WithMany("Activities")
                        .HasForeignKey("ChallengeId");
                });

            modelBuilder.Entity("Server.Models.UserChallenge", b =>
                {
                    b.HasOne("Server.Models.Challenge", "Challenge")
                        .WithMany("UserChallenges")
                        .HasForeignKey("ChallengeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Server.Models.User", "User")
                        .WithMany("UserChallenges")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Challenge");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Server.Models.Challenge", b =>
                {
                    b.Navigation("Activities");

                    b.Navigation("UserChallenges");
                });

            modelBuilder.Entity("Server.Models.SustainableActivity", b =>
                {
                    b.Navigation("Completions");
                });

            modelBuilder.Entity("Server.Models.User", b =>
                {
                    b.Navigation("CompletedActivities");

                    b.Navigation("UserChallenges");
                });
#pragma warning restore 612, 618
        }
    }
}
